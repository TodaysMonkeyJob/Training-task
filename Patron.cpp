#include "Patron.h"
#include "Libraria.h"


void Patron::removeBook(Book* b)
{//Для кожної взятої книги з взятих
    for (int i = 0; i < checkedOutBooks.size(); i++)
    {
        /*
        Якщо код взятої книги ідентичний книги з класу,
         то повертаємно її в бібліотеку,на початок, але додаємо
         до її позиції код в бібліотеці
         */
        if (checkedOutBooks[i]->getIdCode() == b->getIdCode())
            checkedOutBooks.erase(checkedOutBooks.begin() + i);
    }
}

/******************************************************************************
* Вхід: Один парамерт з парметром іd користувача
*
* Вихід: знаходить користувача з відповідним id і повертає вказівник на нього
*
* Мета: виведення відповідного користувача з вектора користувачів
******************************************************************************/
Patron* Library::memberCheck(std::string patronID)
{
    int memberPos = -1; // позиція користувача з відповідним ID

    for (int i = 0; i < members.size(); i++)//Для кожного користувача
    {
        if (members[i].getIdNum() == patronID)//Якщо код користувача дорівнює відповідному
        {
            memberPos = i;//позиція рівна і
        }
    }
    if (memberPos < 0)//якщо позиція відємна, то пустота
        return NULL;
    else
        return &members[memberPos];//повертаємо вказіник користувача на його позицію
}

